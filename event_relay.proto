/**
 * EventRelay is a simple easy to implement event streaming system.
 */
syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.eventrelay";
option java_outer_classname = "EventRelayProto";

package eventrelay;

service Events {
  rpc PublishEvents(PublishEventsRequest) returns (PublishEventsResponse) {}
  rpc PullEvents(PullEventsRequest) returns (PullEventsResponse) {}
  rpc PullQueuedEvents(PullQueuedEventsRequest) returns (PullQueuedEventsResponse) {}
  rpc UnLockQueuedEvents(UnLockQueuedEventsRequest) returns (UnLockQueuedEventsResponse) {}
}

service Metrics {
  rpc ListMetrics(ListMetricsRequest) returns (ListMetricsResponse) {}
  rpc GetMetric(GetMetricRequest) returns (GetMetricResponse) {}
  rpc CreateMetric(CreateMetricRequest) returns (CreateMetricResponse) {}
  rpc DeleteMetric(DeleteMetricRequest) returns (DeleteMetricResponse) {}
  rpc GetMetricValue(GetMetricValueRequest) returns (GetMetricValueResponse) {}
}

service Topics {
  rpc ListTopics(ListTopicsRequest) returns (ListTopicsResponse) {}
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse) {}
  rpc DeleteTopic(DeleteTopicRequest) returns (DeleteTopicResponse) {}
}

service Destinations {
  rpc ListDestinations(ListDestinationsRequest) returns (ListDestinationsResponse) {}
  rpc GetDestination(GetDestinationRequest) returns (GetDestinationResponse) {}
  rpc CreateDestination(CreateDestinationRequest) returns (CreateDestinationResponse) {}
  rpc DeleteDestination(DeleteDestinationRequest) returns (DeleteDestinationResponse) {}
}

service ApiKeys {
  rpc CreateApiKey(CreateApiKeyRequest) returns (CreateApiKeyResponse) {}
  rpc RevokeApiKey(RevokeApiKeyRequest) returns (RevokeApiKeyResponse) {}
  rpc AddDestinationsToApiKey(AddDestinationsToApiKeyRequest) returns (AddDestinationsToApiKeyResponse) {}
  rpc DeleteDestinationsFromApiKey(DeleteDestinationsFromApiKeyRequest) returns (DeleteDestinationsFromApiKeyResponse) {}
  rpc AddTopicsToApiKey(AddTopicsToApiKeyRequest) returns (AddTopicsToApiKeyResponse) {}
  rpc DeleteTopicsFromApiKey(DeleteTopicsFromApiKeyRequest) returns (DeleteTopicsFromApiKeyResponse) {}
}

service JWT {
  rpc CreateJWT(CreateJWTRequest) returns (CreateJWTResponse) {}
}

/**
 * A topic is a means of grouping events together.  They can be used to segment and route events to the right places.
 */
message Topic {
  string id = 1;
  string name = 2;
  string group_key = 3;
}

/**
 * Get a list of topics
 */
message ListTopicsRequest {
  int32 page = 1;
}

/**
 * The list of topics
 */
message ListTopicsResponse {
  repeated Topic topics = 1;
}

message CreateTopicRequest {
  string name = 1;
  string group_key = 2;
}

message CreateTopicResponse {
  Topic topic = 1;
}

message DeleteTopicRequest {
  string id = 1;
}

message DeleteTopicResponse {
  Topic topic = 1;
}

message Destination {
  string id = 1;
  string name = 2;
  string topic_name = 3;
  string topic_identifier = 4;
  map<string, string> config = 5;
  string destination_type = 6;
  string group_key = 7;
}

message ListDestinationsRequest {
  int32 page = 1;
  int32 page_size = 2;
}

message ListDestinationsResponse {
  repeated Destination destinations = 1;
  int32 total_count = 2;
  int32 next_page = 3;
  int32 previous_page = 4;
  int32 total_pages = 5;
}

message GetDestinationRequest {
  string id = 1;
}

message GetDestinationResponse {
  Destination destination = 1;
}

message CreateDestinationRequest {
  string name = 1;
  string topic_name = 2;
  string topic_identifier = 3;
  map<string, string> config = 4;
  bool paused = 5;
  string destination_type = 6;
  string group_key = 7;
}

message CreateDestinationResponse {
  Destination destination = 1;
}
 
message DeleteDestinationRequest {
  string id = 1;
}

message DeleteDestinationResponse {
  Destination destination = 1;
}

message NewEvent {
  string name = 1;
  string data = 2; // stringified JSON
  string source = 3;
  string group_key = 4;
  string reference_key = 5;
  string trace_key = 6;
  string user_key = 7;
  string anonymous_key = 8;
  string occurred_at = 9;
  map<string, string> context = 10; // single level key-value pairs
  // JSON Schema for the event data
  string data_schema = 11; // stringified JSON
  string prev_id = 12;
}

message Event {
  string id = 1;
  string name = 2;
  string topic = 3;
  string data = 4; // stringified JSON
  string source = 5;
  string group_key = 6;
  string reference_key = 7;
  string trace_key = 8;
  string user_key = 9;
  string anonymous_key = 10;
  string occurred_at = 11;
  map<string, string> context = 12; // single level key-value pairs
  int32 offset = 13;
  repeated string errors = 14; // list of strings representing errors
  // JSON Schema for the event data
  string data_schema = 15; // stringified JSON
  string prev_id = 16;
}

message PublishEventsRequest {
   string topic = 1;
   repeated NewEvent events = 2;
   bool durable = 3;
}

message PublishEventsResponse {
  repeated Event events = 1;
}

message PullEventsRequest {
  // ex. "users" or "users:123"
  string topic = 1;
  // max batchSize is 1000, if not specified, defaults to 100
  int32 batch_size = 2;
  int32 offset = 3;
  string query = 4;
}

message PullEventsResponse {
  repeated Event events = 1;
  int32 total_count = 2;
  int32 next_offset = 3;
  int32 previous_offset = 4;
  int32 total_batches = 5;
}

message PullQueuedEventsRequest {
  string destination_id = 1;
  // max batchSize is 1000, if not specified, defaults to 100
  int32 batch_size = 2;
}

message PullQueuedEventsResponse {
  repeated Event events = 1;
}

message UnLockQueuedEventsRequest {
  string destination_id = 1;
  repeated string event_ids = 2;
}

message UnLockQueuedEventsResponse {
  repeated Event events = 1;
}

enum CastAs {
  STRING = 0;
  INTEGER = 1;
  FLOAT = 2;
  DATE = 3;
  DATETIME = 4;
  BOOLEAN = 5;
}

message Filter {
  string field = 1;
  string comparison = 2;
  string value = 3;
  string field_path = 4;
  CastAs cast_as = 5;
}


enum MetricType {
  SUM = 0;
  AVG = 1;
  MIN = 2;
  MAX = 3;
  COUNT = 4;
}

message Metric {
  string id = 1;
  string name = 2;
  string topic_name = 3;
  string topic_identifier = 4;
  // A path to the value using dot syntax ex. "data.cart.total" => 10.00 for {"cart": {"total": 10.00}}
  string field_path = 5;
  MetricType type = 6;
  string query = 7;
}

message GetMetricValueRequest {
  string id = 1;
}

message GetMetricValueResponse {
  string value = 1; 
}

message ListMetricsRequest {
  // ex. "users" or "users:123"
  string topic = 1;
  int32 page = 2;
  int32 page_size = 3;
  string query = 4;
}

message ListMetricsResponse {
  repeated Metric metrics = 1; 
  int32 total_count = 2;
  int32 next_page = 3;
  int32 previous_page = 4;
  int32 total_pages = 5;
}

message GetMetricRequest {
  string id = 1;
}

message GetMetricResponse {
  Metric metric = 1; 
}

message CreateMetricRequest {
  string name = 1;
  string topic_name = 2;
  string topic_identifier = 3;
  // A path to the value using dot syntax ex. "data.cart.total" => 10.00 for {"cart": {"total": 10.00}}
  string field_path = 4;
  MetricType type = 5;
  string query = 6;
}

message CreateMetricResponse {
  Metric metric = 1;
}

message DeleteMetricRequest {
  string id = 1;
}

message DeleteMetricResponse {
  Metric metric = 1;
}


enum ApiKeyType {
  PRODUCER = 0;
  CONSUMER = 1;
}

enum ApiKeyStatus {
  ACTIVE = 0;
  REVOKED = 1;
}

message ApiKey {
  string id = 1;
  string name = 2;
  string key = 3;
  string secret = 4;
  ApiKeyStatus status = 5;
  ApiKeyType type = 6;
  string group_key = 7;
  string tls_hostname = 8;
}

message CreateApiKeyRequest {
  ApiKeyType type = 1;
  string name = 2;
  string group_key = 3;
  string tls_hostname = 4;
}

message CreateApiKeyResponse {
  ApiKey api_key = 1;
}

message RevokeApiKeyRequest {
  string id = 1;
}

message RevokeApiKeyResponse {
  ApiKey api_key = 1;
}

message AddDestinationsToApiKeyRequest {
  string id = 1;
  repeated string destination_ids = 2;
}

message AddDestinationsToApiKeyResponse {
  string id = 1;
  // list of destination ids that were added
  repeated string destination_ids = 2;
}
 
message DeleteDestinationsFromApiKeyRequest {
  string id = 1;
  repeated string destination_ids = 2;
}

 message DeleteDestinationsFromApiKeyResponse {
  string id = 1;
  // list of destination ids that were deleted
  repeated string destination_ids = 2;
}

message AddTopicsToApiKeyRequest {
  string id = 1;
  repeated string topic_names = 2;
}

message AddTopicsToApiKeyResponse {
  string id = 1;
  // list of topics that were added
  repeated string topic_names = 2;
}
 
message DeleteTopicsFromApiKeyRequest {
  string id = 1;
  repeated string topic_names = 2;
}
 message DeleteTopicsFromApiKeyResponse {
  string id = 1;
  // list of topics that were deleted
  repeated string topic_names = 2;
}

message CreateJWTRequest {
  // unix timestamp
  int64 expiration = 1;
}

message CreateJWTResponse {
  string jwt = 1;
}
